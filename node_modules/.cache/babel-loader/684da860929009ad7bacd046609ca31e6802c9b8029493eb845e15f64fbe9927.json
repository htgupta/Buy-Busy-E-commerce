{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\h\\\\Downloads\\\\e-com (1)\\\\e-com\\\\e-com\\\\src\\\\Contexts\\\\authenticationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// importing Hooks\nimport { createContext, useContext, useState } from \"react\";\n\n// importing Hook from react-router-dom\nimport { useNavigate } from \"react-router-dom\";\n\n// importing function for toast notifications\nimport Notification from \"../utils/Notification\";\n\n// importing firebase\nimport { createUserWithEmailAndPassword, updateProfile, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth, db } from \"../firebase\";\nimport { doc, setDoc } from \"firebase/firestore\";\n\n// create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authenticationContext = /*#__PURE__*/createContext();\n// this return  all value pass to authenticationContext\nfunction useAuthentication() {\n  _s();\n  const value = useContext(authenticationContext);\n  return value;\n}\n_s(useAuthentication, \"ksutO2/Ix3UeCrGnhyM+QEP505Y=\");\nfunction CustomAuthenticationContext({\n  children\n}) {\n  _s2();\n  // signupValue is use to contain name, email and password entered by user during signup\n  const [signupValue, setSignupValue] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\"\n  });\n  const [signinButtonDisable, setSigninButtonDisable] = useState(false);\n  const navigate = useNavigate();\n\n  // it take care of signup\n  const handleSignup = () => {\n    if (signupValue.name && signupValue.email && signupValue.password) {\n      setSigninButtonDisable(true);\n      // firebase code\n      createUserWithEmailAndPassword(auth, signupValue.email, signupValue.password).then(async data => {\n        // sign up successful\n        Notification(\"Sign up successfully\", false);\n        const user = data.user;\n\n        // create empty product and orders of this user in firebase\n        await setDoc(doc(db, \"usersCarts\", user.uid), {\n          products: []\n        });\n        await setDoc(doc(db, \"usersOrders\", user.uid), {\n          orders: []\n        });\n\n        // update user displayName to name provided by user\n        await updateProfile(user, {\n          displayName: signupValue.name\n        });\n        setSigninButtonDisable(false);\n        navigate(\"/\");\n      }).catch(error => {\n        setSigninButtonDisable(false);\n        Notification(error.code, true);\n      });\n    } else {\n      Notification(\"Please fill all fields\", true);\n    }\n  };\n\n  // LoginValue is use to contain email and password entered by user during login\n  const [LoginValue, setLoginValue] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [LoginButtonDisable, setLoginButtonDisable] = useState(false);\n\n  // it take care of login\n  let handleLogin = () => {\n    if (LoginValue.email && LoginValue.password) {\n      setLoginButtonDisable(true);\n      // firebase code\n      signInWithEmailAndPassword(auth, LoginValue.email, LoginValue.password).then(() => {\n        // successful login\n        setLoginButtonDisable(false);\n        Notification(\"Log in successfully\");\n        navigate(\"/\");\n      }).catch(error => {\n        // error occur during login\n        setLoginButtonDisable(false);\n        Notification(error.code, true);\n      });\n    } else {\n      Notification(\"Please fill all fields\", true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(authenticationContext.Provider, {\n    value: {\n      setSignupValue,\n      signinButtonDisable,\n      handleSignup,\n      setLoginValue,\n      LoginButtonDisable,\n      handleLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n// exporting CustomAuthenticationContext Component\n_s2(CustomAuthenticationContext, \"So7RRvesoDflM5VW8u8g7E2ne+c=\", false, function () {\n  return [useNavigate];\n});\n_c = CustomAuthenticationContext;\nexport default CustomAuthenticationContext;\n\n// exporting useAuthentication function that return some values\nexport { useAuthentication };\nvar _c;\n$RefreshReg$(_c, \"CustomAuthenticationContext\");","map":{"version":3,"names":["createContext","useContext","useState","useNavigate","Notification","createUserWithEmailAndPassword","updateProfile","signInWithEmailAndPassword","auth","db","doc","setDoc","jsxDEV","_jsxDEV","authenticationContext","useAuthentication","_s","value","CustomAuthenticationContext","children","_s2","signupValue","setSignupValue","name","email","password","signinButtonDisable","setSigninButtonDisable","navigate","handleSignup","then","data","user","uid","products","orders","displayName","catch","error","code","LoginValue","setLoginValue","LoginButtonDisable","setLoginButtonDisable","handleLogin","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/h/Downloads/e-com (1)/e-com/e-com/src/Contexts/authenticationContext.js"],"sourcesContent":["// importing Hooks\r\nimport { createContext, useContext, useState } from \"react\";\r\n\r\n// importing Hook from react-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// importing function for toast notifications\r\nimport Notification from \"../utils/Notification\";\r\n\r\n// importing firebase\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  updateProfile,\r\n  signInWithEmailAndPassword,\r\n} from \"firebase/auth\";\r\nimport { auth, db } from \"../firebase\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\n\r\n// create context\r\nconst authenticationContext = createContext();\r\n// this return  all value pass to authenticationContext\r\nfunction useAuthentication() {\r\n  const value = useContext(authenticationContext);\r\n  return value;\r\n}\r\n\r\nfunction CustomAuthenticationContext({ children }) {\r\n  // signupValue is use to contain name, email and password entered by user during signup\r\n  const [signupValue, setSignupValue] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [signinButtonDisable, setSigninButtonDisable] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  // it take care of signup\r\n  const handleSignup = () => {\r\n    if (signupValue.name && signupValue.email && signupValue.password) {\r\n      setSigninButtonDisable(true);\r\n      // firebase code\r\n      createUserWithEmailAndPassword(\r\n        auth,\r\n        signupValue.email,\r\n        signupValue.password\r\n      )\r\n        .then(async (data) => {\r\n          // sign up successful\r\n          Notification(\"Sign up successfully\", false);\r\n          const user = data.user;\r\n\r\n          // create empty product and orders of this user in firebase\r\n          await setDoc(doc(db, \"usersCarts\", user.uid), {\r\n            products: [],\r\n          });\r\n          await setDoc(doc(db, \"usersOrders\", user.uid), {\r\n            orders: [],\r\n          });\r\n\r\n          // update user displayName to name provided by user\r\n          await updateProfile(user, { displayName: signupValue.name });\r\n          setSigninButtonDisable(false);\r\n          navigate(\"/\");\r\n        })\r\n        .catch((error) => {\r\n          setSigninButtonDisable(false);\r\n          Notification(error.code, true);\r\n        });\r\n    } else {\r\n      Notification(\"Please fill all fields\", true);\r\n    }\r\n  };\r\n\r\n  // LoginValue is use to contain email and password entered by user during login\r\n  const [LoginValue, setLoginValue] = useState({ email: \"\", password: \"\" });\r\n  const [LoginButtonDisable, setLoginButtonDisable] = useState(false);\r\n\r\n  // it take care of login\r\n  let handleLogin = () => {\r\n    if (LoginValue.email && LoginValue.password) {\r\n      setLoginButtonDisable(true);\r\n      // firebase code\r\n      signInWithEmailAndPassword(auth, LoginValue.email, LoginValue.password)\r\n        .then(() => {\r\n          // successful login\r\n          setLoginButtonDisable(false);\r\n          Notification(\"Log in successfully\");\r\n          navigate(\"/\");\r\n        })\r\n        .catch((error) => {\r\n          // error occur during login\r\n          setLoginButtonDisable(false);\r\n          Notification(error.code, true);\r\n        });\r\n    } else {\r\n      Notification(\"Please fill all fields\", true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <authenticationContext.Provider\r\n      value={{\r\n        setSignupValue,\r\n        signinButtonDisable,\r\n        handleSignup,\r\n        setLoginValue,\r\n        LoginButtonDisable,\r\n        handleLogin,\r\n      }}\r\n    >\r\n      {children}\r\n    </authenticationContext.Provider>\r\n  );\r\n}\r\n\r\n// exporting CustomAuthenticationContext Component\r\nexport default CustomAuthenticationContext;\r\n\r\n// exporting useAuthentication function that return some values\r\nexport { useAuthentication };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}